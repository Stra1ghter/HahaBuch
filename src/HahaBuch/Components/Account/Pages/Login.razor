@page "/Account/Login"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using HahaBuch.Data
@using HahaBuch.SharedContracts.DataAnnotations
@using Microsoft.Extensions.Localization

@inject SignInManager<ApplicationUserEntity> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUserEntity> UserManager
@inject IStringLocalizer<SharedResources> Loc

<PageTitle>@Loc["Login"] </PageTitle>

<h1>@Loc["Login"]</h1>
<div class="row">
    <div class="col-lg-6">
        <section>
            <StaticStatusMessage Message="@errorMessage"/>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator/>
            <hr/>
            <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
            <label for="Input.Email" class="form-label">@Loc["Email"] </label>
                    <ValidationMessage For="() => Input.Email" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
                    <label for="Input.Password" class="form-label">@Loc["Password"]</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger"/>
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/>
                        @Loc["RememberMe"]
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">@Loc["Login"]</button>
                </div>
                @*
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            *@
            </EditForm>
        </section>
    </div>
    @* <div class="col-lg-4 col-lg-offset-2"> *@
    @*     <section> *@
    @*         <h3>Use another service to log in.</h3> *@
    @*         <hr/> *@
    @*         <ExternalLoginPicker/> *@
    @*     </section> *@
    @* </div> *@
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        ApplicationUserEntity? user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            errorMessage = Loc["InvalidLoginAttempt"];
            return;
        }
        
        var result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: true);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = Loc["InvalidLoginAttempt"];
        }
    }

    private sealed class InputModel
    {
        [LocalizedRequired] [LocalizedEmailAddress] public string Email { get; set; } = "";

        [LocalizedRequired]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

}