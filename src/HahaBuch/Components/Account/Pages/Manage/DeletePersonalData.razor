@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using HahaBuch.Data
@using Microsoft.Extensions.Localization

@inject UserManager<ApplicationUserEntity> UserManager
@inject SignInManager<ApplicationUserEntity> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger
@inject IStringLocalizer<UserOverview> UsersLoc
@inject IStringLocalizer<SharedResources> SharedLoc 

<PageTitle>@UsersLoc["PersonalDataDeleteHeading"]</PageTitle>

<StaticStatusMessage Message="@message"/>

<h3>@UsersLoc["PersonalDataDeleteHeading"]</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>@UsersLoc["PersonalDataDeleteHint"]</strong>
    </p>
</div>

<div>
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        @if (requirePassword)
        {
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password."/>
                <label for="Input.Password" class="form-label">@SharedLoc["Password"]</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
        }
        <button class="w-100 btn btn-lg btn-danger" type="submit">@UsersLoc["PersonalDataDeleteButton"]</button>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUserEntity _userEntity = default!;
    private bool requirePassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        _userEntity = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(_userEntity);
    }

    private async Task OnValidSubmitAsync()
    {
        if (requirePassword && !await UserManager.CheckPasswordAsync(_userEntity, Input.Password))
        {
            message = $"{SharedLoc["Error"]}: {SharedLoc["InvalidPassword"]}.";
            return;
        }

        var result = await UserManager.DeleteAsync(_userEntity);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }
        // TODO: check if this is the last vault user, then delete the vault as well
        // this should probably be a background job or something to avoid deleting all data by mistake

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(_userEntity);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)] public string Password { get; set; } = "";
    }

}