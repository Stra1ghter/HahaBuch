@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using HahaBuch.Data
@using HahaBuch.SharedContracts.DataAnnotations
@using Microsoft.Extensions.Localization
@inject UserManager<ApplicationUserEntity> UserManager
@inject SignInManager<ApplicationUserEntity> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject IStringLocalizer<ChangePassword> Loc
@inject IStringLocalizer<SharedResources> SharedLoc

<PageTitle>@Loc["ChangePasswordHeading"]</PageTitle>

<h3>@Loc["ChangePasswordHeading"]</h3>
<StaticStatusMessage Message="@message"/>
<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" id="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter the old password"/>
                <label for="Input.OldPassword" class="form-label">@Loc["OldPassword"]</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password"/>
                <label for="Input.NewPassword" class="form-label">@Loc["NewPassword"]</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password"/>
                <label for="Input.ConfirmPassword" class="form-label">@Loc["ConfirmPassword"]</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@Loc["UpdatePasswordAction"]</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUserEntity _userEntity = default!;
    private bool hasPassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _userEntity = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(_userEntity);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(_userEntity, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"{SharedLoc["Error"]}: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_userEntity);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus(@Loc["PasswordChangeSuccessful"], HttpContext);
    }

    private sealed class InputModel
    {
        [LocalizedRequired]
        public string OldPassword { get; set; } = "";

        [LocalizedRequired]
        [LocalizedStringLength(6, 100)]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [LocalizedCompare("NewPassword")]
        public string ConfirmPassword { get; set; } = "";
    }

}