@page "/transaction"
@rendermode InteractiveAuto
@using HahaBuch.SharedContracts
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using HahaBuch.Client.SharedComponents
@using System.Globalization
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SharedResources> Loc
@inject ITransactionService TransactionService

@attribute [Authorize]

<div class="container mt-4">
    <PageTitle>@Loc["TransactionOverview"]</PageTitle>
    <h3>@Loc["TransactionOverview"]</h3>
    
    @if (_loading)
    {
        <LoadingIndicator />
    }
    else
    {
        <div class="table">
            <QuickGrid ItemsProvider="@_itemsProvider" @ref="TransactionsGrid" Virtualize=true >
                <PropertyColumn Property="@(c => c.Amount.ToString("#,##0.00"))" Sortable=true Title="@AmountGridHeader" Align="Align.Right" />
                <TemplateColumn Sortable=true Title="@Loc["Category"]" SortBy="@(GridSort<TransactionOverviewDto>.ByAscending(c => c.Category))">
                    <div class="d-flex align-items-center">
                        @if (!string.IsNullOrEmpty(context.CategoryColor))
                        {
                            <span class="category-color-indicator me-2" style="background-color: #@context.CategoryColor;"></span>
                        }
                        <span>@context.Category</span>
                    </div>
                </TemplateColumn>
                <PropertyColumn Property="@(c => c.DateTime.ToString("d", CultureInfo.CurrentUICulture))" Sortable=true Title="@Loc["DateTime"]" />
                <PropertyColumn Property="@(c => c.Description)" Sortable=true Title="@Loc["Description"]" />
                <TemplateColumn Title="@Loc["Actions"]">
                        <button type="button" class="btn btn-primary" @onclick="() => EditTransaction(context)" data-bs-toggle="modal" data-bs-target="#editTransaction">@Loc["Edit"]</button>
                        <button type="button" class="btn btn-danger" @onclick="() => ToggleDeleteTransaction(context.Id)" data-bs-toggle="modal" data-bs-target="#deleteTransaction">@Loc["Delete"]</button>
                </TemplateColumn>
            </QuickGrid>
            @if (_gridLoading || RendererInfo.Name == "Static")
            {
                <LoadingIndicator ShowButton="false" />
            }
        </div>
    }
</div>

<!-- Modal for editing transactions -->
<div class="modal" id="editTransaction" data-bs-backdrop="static" tabindex="-1" aria-labelledby="editTransactionLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTransactionLabel">@Loc["TransactionEdit"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (TransactionEditDto != null)
                {
                    <TransactionPut Transaction="TransactionEditDto" OnTransactionUpdated="@TransactionUpdated" Categories="_categories" />
                }
            </div>
        </div>
    </div>
    <script>
        function closeEditTransactionModal()
        {
            bootstrap.Modal.getInstance('#editTransaction').hide();
        }
    </script>
</div>

<!-- Modal for delete warning -->
<div class="modal" id="deleteTransaction" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteModalLabel">@Loc["TransactionDelete"]</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @Loc["TransactionDeleteWarning"]
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Loc["Cancel"]</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteTransaction">@Loc["Delete"]</button>
            </div>
        </div>
    </div>
    <script>
        function closeDeleteTransactionModal()
        {
            bootstrap.Modal.getInstance('#deleteTransaction').hide();
        }
    </script>
</div>

<style>
.col-justify-right {
    text-align: right;
}
td > button.btn {
    padding: .2rem .4rem .2rem .2rem;
}
.category-color-indicator {
    display: inline-block;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    border: 3px solid #dee2e6;
}
</style>


@code {
    private bool _loading = true;
    private bool _gridLoading = false;
    private GridItemsProvider<TransactionOverviewDto>? _itemsProvider;
    private TransactionDto? TransactionEditDto { get; set; }
    private IEnumerable<CategoryDto>? _categories { get; set; }
    private QuickGrid<TransactionOverviewDto> TransactionsGrid;
    private Guid? DeleteTransactionId { get; set; }
    private string AmountGridHeader =>
        CultureInfo.CurrentUICulture.NumberFormat.CurrencySymbol != "¤" && !string.IsNullOrEmpty(CultureInfo.CurrentUICulture.NumberFormat.CurrencySymbol)
        ? $"{Loc["Amount"]} ({CultureInfo.CurrentUICulture.NumberFormat.CurrencySymbol})"
        : Loc["Amount"];


    protected override async Task OnInitializedAsync()
    {
        _itemsProvider = LoadTransactionsWithLoadingState;
        _loading = false;
        _categories = await CategoryService.GetCategories();
    }

    private async ValueTask<GridItemsProviderResult<TransactionOverviewDto>> LoadTransactionsWithLoadingState(GridItemsProviderRequest<TransactionOverviewDto> request)
    {
        _gridLoading = true;
        StateHasChanged();
        
        try
        {
            var result = await TransactionService.GetTransactions(request);
            return result;
        }
        finally
        {
            _gridLoading = false;
            StateHasChanged();
        }
    }

    private void EditTransaction(TransactionOverviewDto dto)
    {
        TransactionEditDto = dto.MapToTransactionDto();
    }


    private void ToggleDeleteTransaction(Guid id)
    {
        DeleteTransactionId = id; // Save the ID of the transaction to be deleted, remaining work by boostrap modal toggle
    }

    private async Task DeleteTransaction()
    {
        if (DeleteTransactionId.HasValue)
        {
            await TransactionService.DeleteTransaction(DeleteTransactionId.Value);
            DeleteTransactionId = null;
            await JSRuntime.InvokeVoidAsync("closeDeleteTransactionModal");
            await TransactionsGrid.RefreshDataAsync();
        }
    }

    private async Task TransactionUpdated(TransactionDto updatedTransaction)
    {
        // replace the edited transaction in the list
        TransactionOverviewDto updatedeOverviewDto = TransactionOverviewDto.MapFromTransactionDto(updatedTransaction);
        if (updatedeOverviewDto.CategoryId != Guid.Empty)
        {
            updatedeOverviewDto.Category = _categories?.FirstOrDefault(c => c.Id == updatedeOverviewDto.CategoryId)?.Name ?? string.Empty;
            updatedeOverviewDto.CategoryColor = _categories?.FirstOrDefault(c => c.Id == updatedeOverviewDto.CategoryId)?.RgbColorString ?? string.Empty;
        }

        await TransactionsGrid.RefreshDataAsync();

        JSRuntime.InvokeVoidAsync("closeEditTransactionModal");
    }
}