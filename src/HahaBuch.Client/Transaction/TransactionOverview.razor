@page "/transaction"
@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@using HahaBuch.SharedContracts
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Authorization
@using HahaBuch.Client.SharedComponents
@using System.Globalization
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SharedResources> Loc
@inject ITransactionService TransactionService

@attribute [Authorize]

<div class="container mt-4">
    <PageTitle>@Loc["TransactionOverview"]</PageTitle>
    <h3>@Loc["TransactionOverview"]</h3>
    
    @if (_loading)
    {
        <LoadingIndicator />
    }
    else if (_transactions.Count == 0)
    {
        <p>@Loc["TransactionsNotFound"]</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>@Loc["Amount"]</th>
                <th>@Loc["Category"]</th>
                <th>@Loc["DateTime"]</th>
                <th>@Loc["Description"]</th>
                <th>@Loc["Actions"]</th>
            </tr>
            </thead>
            <tbody>
            @foreach (TransactionOverviewDto transaction in _transactions)
            {
                <tr>
                    <td>@FormatCurrency(transaction.Amount)</td>
                    <td>@transaction.Category</td>
                    <td>@transaction.DateTime.ToString("g")</td>
                    <td>@transaction.Description</td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => EditTransaction(transaction)" data-bs-toggle="modal" data-bs-target="#editTransaction">@Loc["Edit"]</button>
                        <button type="button" class="btn btn-danger" @onclick="() => ToggleDeleteTransaction(transaction.Id)" data-bs-toggle="modal" data-bs-target="#deleteTransaction">@Loc["Delete"]</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
</div>

<!-- Modal for editing transactions -->
<div class="modal" id="editTransaction" data-bs-backdrop="static" tabindex="-1" aria-labelledby="editTransactionLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTransactionLabel">@Loc["TransactionEdit"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (TransactionEditDto != null)
                {
                    <TransactionPut Transaction="TransactionEditDto" OnTransactionUpdated="@TransactionUpdated" Categories="_categories" />
                }
            </div>
        </div>
    </div>
    <script>
        function closeEditTransactionModal()
        {
            bootstrap.Modal.getInstance('#editTransaction').hide();
        }
    </script>
</div>

<!-- Modal for delete warning -->
<div class="modal" id="deleteTransaction" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteModalLabel">@Loc["TransactionDelete"]</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @Loc["TransactionDeleteWarning"]
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Loc["Cancel"]</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteTransaction">@Loc["Delete"]</button>
            </div>
        </div>
    </div>
    <script>
        function closeDeleteTransactionModal()
        {
            bootstrap.Modal.getInstance('#deleteTransaction').hide();
        }
    </script>
</div>



@code {
    private bool _loading = true;
    private IList<TransactionOverviewDto> _transactions = null!;
    private TransactionDto? TransactionEditDto { get; set; }
    private IEnumerable<CategoryDto>? _categories { get; set; }
    private Guid? DeleteTransactionId { get; set; }
    private bool ValidCurrencyInUiCulture => 
        CultureInfo.CurrentUICulture.NumberFormat.CurrencySymbol != "¤" && 
        !string.IsNullOrEmpty(CultureInfo.CurrentUICulture.NumberFormat.CurrencySymbol);

    protected override async Task OnInitializedAsync()
    {
        _transactions = await TransactionService.GetTransactions();
        _loading = false;
        _categories = await CategoryService.GetCategories();
    }

    private void EditTransaction(TransactionOverviewDto dto)
    {
        TransactionEditDto = dto.MapToTransactionDto();
    }


    private void ToggleDeleteTransaction(Guid id)
    {
        DeleteTransactionId = id; // Save the ID of the transaction to be deleted, remaining work by boostrap modal toggle
    }

    private async Task DeleteTransaction()
    {
        if (DeleteTransactionId.HasValue)
        {
            await TransactionService.DeleteTransaction(DeleteTransactionId.Value);
            _transactions.Remove(_transactions.First(t => t.Id == DeleteTransactionId.Value));
            DeleteTransactionId = null;
            await JSRuntime.InvokeVoidAsync("closeDeleteTransactionModal");
        }
    }

    private void TransactionUpdated(TransactionDto updatedTransaction)
    {
        // replace the edited transaction in the list
        TransactionOverviewDto updatedeOverviewDto = TransactionOverviewDto.MapFromTransactionDto(updatedTransaction);
        if (updatedeOverviewDto.CategoryId != Guid.Empty)
        {
            updatedeOverviewDto.Category = _categories?.FirstOrDefault(c => c.Id == updatedeOverviewDto.CategoryId)?.Name ?? string.Empty;
        }

        var index = _transactions.IndexOf(_transactions.First(t => t.Id == updatedeOverviewDto.Id));
        _transactions[index] = updatedeOverviewDto;

        JSRuntime.InvokeVoidAsync("closeEditTransactionModal");
    }

    // Format with currency symbol only if the current UI culture has a valid currency symbol defined.
    // E.g. "de-DE" has "€", while "de" (without a region) only has "¤" as a placeholder.
    private string FormatCurrency(decimal amount)
        => ValidCurrencyInUiCulture ? amount.ToString("C") : amount.ToString();
}