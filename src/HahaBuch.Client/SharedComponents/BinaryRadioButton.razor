@if (!string.IsNullOrEmpty(Label))
{
    <label class="form-label">@Label</label>
}

<div class="btn-group" role="group" aria-label="@Label">
    <input type="radio" 
           class="btn-check" 
           name="@Name" 
           id="@($"{Name}_option1")" 
           value="@true" 
           checked="@(Value == true)"
           @onchange="@(() => HandleValueChanged(true))" />
    <label class="btn @GetButtonClass(true)" for="@($"{Name}_option1")">
        @TrueLabel
    </label>
    <input type="radio" 
           class="btn-check" 
           name="@Name" 
           id="@($"{Name}_option2")" 
           value="@false" 
           checked="@(Value == false)"
           @onchange="@(() => HandleValueChanged(false))" />
    <label class="btn @GetButtonClass(false)" for="@($"{Name}_option2")">
        @FalseLabel
    </label>
</div>

@code {
    [Parameter] public string? Label { get; set; }
    [Parameter] public string Name { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string TrueLabel { get; set; } = "Yes";
    [Parameter] public string FalseLabel { get; set; } = "No";
    [Parameter] public bool Value { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public string ButtonVariant { get; set; } = "outline-primary";
    [Parameter] public bool Disabled { get; set; } = false;

    private string GetButtonClass(object? optionValue)
    {
        var baseClass = $"btn-{ButtonVariant}";
        
        if (Disabled)
        {
            baseClass += " disabled";
        }
        
        return baseClass;
    }

    private async Task HandleValueChanged(bool newValue)
    {
        if (!Disabled)
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(newValue);
        }
    }
}
